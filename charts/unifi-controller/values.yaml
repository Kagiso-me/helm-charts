image:
  repository: linuxserver/unifi-controller
  pullPolicy: IfNotPresent
  tag: 6.5.55

replicaCount: 1

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

environment:
  timezone: "Africa/Johannesburg"
  uid: 1000
  gid: 1000
  memLimit: 1920    # Keep this a little below the resource limits
  memStartup: 1024  # Set this rougly to the resource requests

service:
  type: "LoadBalancer"
  annotations:
    traefik.ingress.kubernetes.io/service.serversscheme: https
  ports:
    devicecom: 8080
    webapi: 8443
  appDiscovery: true
  syslogCapture: true
  loadBalancerIP: "10.0.10.14"

ingress:
  enabled: false
  className: "traefik"
  annotations:
    kubernetes.io/ingress.class: traefik
    kubernetes.io/tls-acme: "true"
  hosts:
    - host: unifi.local.kagiso.me
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    - secretName: local-kagiso-me-staging-tls
      hosts:
        - unifi.local.kagiso.me


# if set, use this persistant volume claim for the internal mongodb
persistence:
  enabled: true
  accessMode: ReadWriteMany
  size: 5Gi
  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  storageClass: longhorn
  annotations: {}
  backup:
    enabled: true
    accessMode: ReadWriteMany
    size: 1Gi
    ## database data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    storageClass: longhorn
    annotations: {}



podSecurityContext: {}
  # runAsUser: 999
  # fsGroup: 999

securityContext: {}
#  capabilities:
#     drop:
#     - ALL
#  readOnlyRootFilesystem: false
#  runAsNonRoot: true
#  runAsUser: 999

resources:
  limits:
    cpu: 750m
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 1Gi


nodeSelector: {}
  #unifi-controller/enabled: "true"

tolerations: []

affinity: {}